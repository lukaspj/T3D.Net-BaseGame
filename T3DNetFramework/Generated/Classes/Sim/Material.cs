using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using T3DNetFramework.Engine;
using T3DNetFramework.Engine.Util;
using T3DNetFramework.Generated.Classes.Global;
using T3DNetFramework.Generated.Classes.Reflection;
using T3DNetFramework.Generated.Classes.Sim;
using T3DNetFramework.Generated.Classes.Sim.Net;
using T3DNetFramework.Generated.Enums.Global;
using T3DNetFramework.Generated.Enums.Reflection;
using T3DNetFramework.Generated.Structs.Global;
using T3DNetFramework.Generated.Structs.Gui;
using T3DNetFramework.Generated.Structs.Math;
using T3DNetFramework.Interop;

namespace T3DNetFramework.Generated.Classes.Sim {    
    public unsafe class Material : SimObject {
        public Material(bool pRegister = false) 
            : base(pRegister) {
        }
        
        public Material(string pName, bool pRegister) 
            : this(false) {
            Name = pName;
            if (pRegister) {
                RegisterObject();
            }
        }
        
        public Material(string pName) 
            : this(pName, false) {
        }
        
        public Material(string pName, string pParent, bool pRegister = false) 
            : this(pName, pRegister) {
            CopyFrom(Engine.Sim.FindObject<SimObject>(pParent));
        }
        
        public Material(string pName, SimObject pParent, bool pRegister = false) 
            : this(pName, pRegister) {
            CopyFrom(pParent);
        }
        
        public Material(SimObject pObj) 
            : base(pObj) {
        }
        
        public Material(IntPtr pObj) 
            : base(pObj) {
        }
        
		protected override void CreateObjectPtr()
		{
			ObjectPtr = InternalUnsafeMethods.Create()(new InternalUnsafeMethods.Create__Args());
		}

        #region UnsafeNativeMethods
        new internal struct InternalUnsafeMethods {
            [StructLayout(LayoutKind.Sequential)]
            internal struct SetAutoGenerated__Args
            {
                [MarshalAs(UnmanagedType.I1)]
                internal bool isAutoGenerated;
            }

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            internal delegate void _SetAutoGenerated(IntPtr _this, SetAutoGenerated__Args args);
            private static _SetAutoGenerated _SetAutoGeneratedFunc;
            internal static _SetAutoGenerated SetAutoGenerated() {
                if (_SetAutoGeneratedFunc == null) {
                    _SetAutoGeneratedFunc =
                        (_SetAutoGenerated)Marshal.GetDelegateForFunctionPointer(
                            Torque3D.DllLoadUtils.GetProcAddress(
                                Torque3D.Torque3DLibHandle,
                                "fnMaterial_setAutoGenerated"), typeof(_SetAutoGenerated));
                }
                
                return _SetAutoGeneratedFunc;
            }

            [StructLayout(LayoutKind.Sequential)]
            internal struct IsAutoGenerated__Args
            {
            }

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal delegate bool _IsAutoGenerated(IntPtr _this, IsAutoGenerated__Args args);
            private static _IsAutoGenerated _IsAutoGeneratedFunc;
            internal static _IsAutoGenerated IsAutoGenerated() {
                if (_IsAutoGeneratedFunc == null) {
                    _IsAutoGeneratedFunc =
                        (_IsAutoGenerated)Marshal.GetDelegateForFunctionPointer(
                            Torque3D.DllLoadUtils.GetProcAddress(
                                Torque3D.Torque3DLibHandle,
                                "fnMaterial_isAutoGenerated"), typeof(_IsAutoGenerated));
                }
                
                return _IsAutoGeneratedFunc;
            }

            [StructLayout(LayoutKind.Sequential)]
            internal struct GetFilename__Args
            {
            }

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            
            internal delegate IntPtr _GetFilename(IntPtr _this, GetFilename__Args args);
            private static _GetFilename _GetFilenameFunc;
            internal static _GetFilename GetFilename() {
                if (_GetFilenameFunc == null) {
                    _GetFilenameFunc =
                        (_GetFilename)Marshal.GetDelegateForFunctionPointer(
                            Torque3D.DllLoadUtils.GetProcAddress(
                                Torque3D.Torque3DLibHandle,
                                "fnMaterial_getFilename"), typeof(_GetFilename));
                }
                
                return _GetFilenameFunc;
            }

            [StructLayout(LayoutKind.Sequential)]
            internal struct GetAnimFlags__Args
            {
                internal uint id;
            }

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            
            internal delegate IntPtr _GetAnimFlags(IntPtr _this, GetAnimFlags__Args args);
            private static _GetAnimFlags _GetAnimFlagsFunc;
            internal static _GetAnimFlags GetAnimFlags() {
                if (_GetAnimFlagsFunc == null) {
                    _GetAnimFlagsFunc =
                        (_GetAnimFlags)Marshal.GetDelegateForFunctionPointer(
                            Torque3D.DllLoadUtils.GetProcAddress(
                                Torque3D.Torque3DLibHandle,
                                "fnMaterial_getAnimFlags"), typeof(_GetAnimFlags));
                }
                
                return _GetAnimFlagsFunc;
            }

            [StructLayout(LayoutKind.Sequential)]
            internal struct DumpInstances__Args
            {
            }

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            internal delegate void _DumpInstances(IntPtr _this, DumpInstances__Args args);
            private static _DumpInstances _DumpInstancesFunc;
            internal static _DumpInstances DumpInstances() {
                if (_DumpInstancesFunc == null) {
                    _DumpInstancesFunc =
                        (_DumpInstances)Marshal.GetDelegateForFunctionPointer(
                            Torque3D.DllLoadUtils.GetProcAddress(
                                Torque3D.Torque3DLibHandle,
                                "fnMaterial_dumpInstances"), typeof(_DumpInstances));
                }
                
                return _DumpInstancesFunc;
            }

            [StructLayout(LayoutKind.Sequential)]
            internal struct Reload__Args
            {
            }

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            internal delegate void _Reload(IntPtr _this, Reload__Args args);
            private static _Reload _ReloadFunc;
            internal static _Reload Reload() {
                if (_ReloadFunc == null) {
                    _ReloadFunc =
                        (_Reload)Marshal.GetDelegateForFunctionPointer(
                            Torque3D.DllLoadUtils.GetProcAddress(
                                Torque3D.Torque3DLibHandle,
                                "fnMaterial_reload"), typeof(_Reload));
                }
                
                return _ReloadFunc;
            }

            [StructLayout(LayoutKind.Sequential)]
            internal struct Flush__Args
            {
            }

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            internal delegate void _Flush(IntPtr _this, Flush__Args args);
            private static _Flush _FlushFunc;
            internal static _Flush Flush() {
                if (_FlushFunc == null) {
                    _FlushFunc =
                        (_Flush)Marshal.GetDelegateForFunctionPointer(
                            Torque3D.DllLoadUtils.GetProcAddress(
                                Torque3D.Torque3DLibHandle,
                                "fnMaterial_flush"), typeof(_Flush));
                }
                
                return _FlushFunc;
            }

            [StructLayout(LayoutKind.Sequential)]
            internal struct StaticGetType__Args
            {
            }

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            internal delegate IntPtr _StaticGetType(StaticGetType__Args args);
            private static _StaticGetType _StaticGetTypeFunc;
            internal static _StaticGetType StaticGetType() {
                if (_StaticGetTypeFunc == null) {
                    _StaticGetTypeFunc =
                        (_StaticGetType)Marshal.GetDelegateForFunctionPointer(
                            Torque3D.DllLoadUtils.GetProcAddress(
                                Torque3D.Torque3DLibHandle,
                                "fnMaterial_staticGetType"), typeof(_StaticGetType));
                }
                
                return _StaticGetTypeFunc;
            }

            [StructLayout(LayoutKind.Sequential)]
            internal struct Create__Args
            {
            }

            [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
            internal delegate IntPtr _Create(Create__Args args);
            private static _Create _CreateFunc;
            internal static _Create Create() {
                if (_CreateFunc == null) {
                    _CreateFunc =
                        (_Create)Marshal.GetDelegateForFunctionPointer(
                            Torque3D.DllLoadUtils.GetProcAddress(
                                Torque3D.Torque3DLibHandle,
                                "fnMaterial_create"), typeof(_Create));
                }
                
                return _CreateFunc;
            }
        }
        #endregion

        public void SetAutoGenerated(bool isAutoGenerated) {
             InternalUnsafeMethods.SetAutoGenerated__Args _args = new InternalUnsafeMethods.SetAutoGenerated__Args() {
                isAutoGenerated = isAutoGenerated,
             };
             InternalUnsafeMethods.SetAutoGenerated()(ObjectPtr, _args);
        }

        public bool IsAutoGenerated() {
             InternalUnsafeMethods.IsAutoGenerated__Args _args = new InternalUnsafeMethods.IsAutoGenerated__Args() {
             };
             bool _engineResult = InternalUnsafeMethods.IsAutoGenerated()(ObjectPtr, _args);
             return _engineResult;
        }

        public string GetFilename() {
             InternalUnsafeMethods.GetFilename__Args _args = new InternalUnsafeMethods.GetFilename__Args() {
             };
             IntPtr _engineResult = InternalUnsafeMethods.GetFilename()(ObjectPtr, _args);
             return StringMarshal.IntPtrToUtf8String(_engineResult);
        }

        public string GetAnimFlags(uint id) {
             InternalUnsafeMethods.GetAnimFlags__Args _args = new InternalUnsafeMethods.GetAnimFlags__Args() {
                id = id,
             };
             IntPtr _engineResult = InternalUnsafeMethods.GetAnimFlags()(ObjectPtr, _args);
             return StringMarshal.IntPtrToUtf8String(_engineResult);
        }

        public void DumpInstances() {
             InternalUnsafeMethods.DumpInstances__Args _args = new InternalUnsafeMethods.DumpInstances__Args() {
             };
             InternalUnsafeMethods.DumpInstances()(ObjectPtr, _args);
        }

        public void Reload() {
             InternalUnsafeMethods.Reload__Args _args = new InternalUnsafeMethods.Reload__Args() {
             };
             InternalUnsafeMethods.Reload()(ObjectPtr, _args);
        }

        public void Flush() {
             InternalUnsafeMethods.Flush__Args _args = new InternalUnsafeMethods.Flush__Args() {
             };
             InternalUnsafeMethods.Flush()(ObjectPtr, _args);
        }

        public static EngineTypeInfo StaticGetType() {
             InternalUnsafeMethods.StaticGetType__Args _args = new InternalUnsafeMethods.StaticGetType__Args() {
             };
             IntPtr _engineResult = InternalUnsafeMethods.StaticGetType()(_args);
             return new EngineTypeInfo(_engineResult);
        }

        public string MapTo {
            get => GenericMarshal.StringTo<string>(GetFieldValue("mapTo"));
            set => SetFieldValue("mapTo", GenericMarshal.ToString(value));
        }

        public DynamicFieldVector<LinearColorF> DiffuseColor {
            get => new DynamicFieldVector<LinearColorF>(
                    this, 
                    "diffuseColor", 
                    4, 
                    val => GenericMarshal.StringTo<LinearColorF>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<string> DiffuseMap {
            get => new DynamicFieldVector<string>(
                    this, 
                    "diffuseMap", 
                    4, 
                    val => GenericMarshal.StringTo<string>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<bool> DiffuseMapSRGB {
            get => new DynamicFieldVector<bool>(
                    this, 
                    "diffuseMapSRGB", 
                    4, 
                    val => GenericMarshal.StringTo<bool>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<string> OverlayMap {
            get => new DynamicFieldVector<string>(
                    this, 
                    "overlayMap", 
                    4, 
                    val => GenericMarshal.StringTo<string>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<string> LightMap {
            get => new DynamicFieldVector<string>(
                    this, 
                    "lightMap", 
                    4, 
                    val => GenericMarshal.StringTo<string>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<string> ToneMap {
            get => new DynamicFieldVector<string>(
                    this, 
                    "toneMap", 
                    4, 
                    val => GenericMarshal.StringTo<string>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<string> DetailMap {
            get => new DynamicFieldVector<string>(
                    this, 
                    "detailMap", 
                    4, 
                    val => GenericMarshal.StringTo<string>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<Point2F> DetailScale {
            get => new DynamicFieldVector<Point2F>(
                    this, 
                    "detailScale", 
                    4, 
                    val => GenericMarshal.StringTo<Point2F>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<string> NormalMap {
            get => new DynamicFieldVector<string>(
                    this, 
                    "normalMap", 
                    4, 
                    val => GenericMarshal.StringTo<string>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<string> DetailNormalMap {
            get => new DynamicFieldVector<string>(
                    this, 
                    "detailNormalMap", 
                    4, 
                    val => GenericMarshal.StringTo<string>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> DetailNormalMapStrength {
            get => new DynamicFieldVector<float>(
                    this, 
                    "detailNormalMapStrength", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<LinearColorF> Specular {
            get => new DynamicFieldVector<LinearColorF>(
                    this, 
                    "specular", 
                    4, 
                    val => GenericMarshal.StringTo<LinearColorF>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> SpecularPower {
            get => new DynamicFieldVector<float>(
                    this, 
                    "specularPower", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> SpecularStrength {
            get => new DynamicFieldVector<float>(
                    this, 
                    "specularStrength", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<bool> PixelSpecular {
            get => new DynamicFieldVector<bool>(
                    this, 
                    "pixelSpecular", 
                    4, 
                    val => GenericMarshal.StringTo<bool>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<bool> AccuEnabled {
            get => new DynamicFieldVector<bool>(
                    this, 
                    "accuEnabled", 
                    4, 
                    val => GenericMarshal.StringTo<bool>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> AccuScale {
            get => new DynamicFieldVector<float>(
                    this, 
                    "accuScale", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> AccuDirection {
            get => new DynamicFieldVector<float>(
                    this, 
                    "accuDirection", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> AccuStrength {
            get => new DynamicFieldVector<float>(
                    this, 
                    "accuStrength", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> AccuCoverage {
            get => new DynamicFieldVector<float>(
                    this, 
                    "accuCoverage", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> AccuSpecular {
            get => new DynamicFieldVector<float>(
                    this, 
                    "accuSpecular", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<string> SpecularMap {
            get => new DynamicFieldVector<string>(
                    this, 
                    "specularMap", 
                    4, 
                    val => GenericMarshal.StringTo<string>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> ParallaxScale {
            get => new DynamicFieldVector<float>(
                    this, 
                    "parallaxScale", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<bool> UseAnisotropic {
            get => new DynamicFieldVector<bool>(
                    this, 
                    "useAnisotropic", 
                    4, 
                    val => GenericMarshal.StringTo<bool>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<bool> VertLit {
            get => new DynamicFieldVector<bool>(
                    this, 
                    "vertLit", 
                    4, 
                    val => GenericMarshal.StringTo<bool>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<bool> VertColor {
            get => new DynamicFieldVector<bool>(
                    this, 
                    "vertColor", 
                    4, 
                    val => GenericMarshal.StringTo<bool>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> MinnaertConstant {
            get => new DynamicFieldVector<float>(
                    this, 
                    "minnaertConstant", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<bool> SubSurface {
            get => new DynamicFieldVector<bool>(
                    this, 
                    "subSurface", 
                    4, 
                    val => GenericMarshal.StringTo<bool>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<LinearColorF> SubSurfaceColor {
            get => new DynamicFieldVector<LinearColorF>(
                    this, 
                    "subSurfaceColor", 
                    4, 
                    val => GenericMarshal.StringTo<LinearColorF>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> SubSurfaceRolloff {
            get => new DynamicFieldVector<float>(
                    this, 
                    "subSurfaceRolloff", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<bool> Glow {
            get => new DynamicFieldVector<bool>(
                    this, 
                    "glow", 
                    4, 
                    val => GenericMarshal.StringTo<bool>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<bool> Emissive {
            get => new DynamicFieldVector<bool>(
                    this, 
                    "emissive", 
                    4, 
                    val => GenericMarshal.StringTo<bool>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public bool DoubleSided {
            get => GenericMarshal.StringTo<bool>(GetFieldValue("doubleSided"));
            set => SetFieldValue("doubleSided", GenericMarshal.ToString(value));
        }

        public DynamicFieldVector<MaterialAnimType> AnimFlags {
            get => new DynamicFieldVector<MaterialAnimType>(
                    this, 
                    "animFlags", 
                    4, 
                    val => GenericMarshal.StringTo<MaterialAnimType>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<Point2F> ScrollDir {
            get => new DynamicFieldVector<Point2F>(
                    this, 
                    "scrollDir", 
                    4, 
                    val => GenericMarshal.StringTo<Point2F>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> ScrollSpeed {
            get => new DynamicFieldVector<float>(
                    this, 
                    "scrollSpeed", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> RotSpeed {
            get => new DynamicFieldVector<float>(
                    this, 
                    "rotSpeed", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<Point2F> RotPivotOffset {
            get => new DynamicFieldVector<Point2F>(
                    this, 
                    "rotPivotOffset", 
                    4, 
                    val => GenericMarshal.StringTo<Point2F>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<MaterialWaveType> WaveType {
            get => new DynamicFieldVector<MaterialWaveType>(
                    this, 
                    "waveType", 
                    4, 
                    val => GenericMarshal.StringTo<MaterialWaveType>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> WaveFreq {
            get => new DynamicFieldVector<float>(
                    this, 
                    "waveFreq", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> WaveAmp {
            get => new DynamicFieldVector<float>(
                    this, 
                    "waveAmp", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> SequenceFramePerSec {
            get => new DynamicFieldVector<float>(
                    this, 
                    "sequenceFramePerSec", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<float> SequenceSegmentSize {
            get => new DynamicFieldVector<float>(
                    this, 
                    "sequenceSegmentSize", 
                    4, 
                    val => GenericMarshal.StringTo<float>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<Point2I> CellIndex {
            get => new DynamicFieldVector<Point2I>(
                    this, 
                    "cellIndex", 
                    4, 
                    val => GenericMarshal.StringTo<Point2I>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<Point2I> CellLayout {
            get => new DynamicFieldVector<Point2I>(
                    this, 
                    "cellLayout", 
                    4, 
                    val => GenericMarshal.StringTo<Point2I>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<int> CellSize {
            get => new DynamicFieldVector<int>(
                    this, 
                    "cellSize", 
                    4, 
                    val => GenericMarshal.StringTo<int>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<bool> BumpAtlas {
            get => new DynamicFieldVector<bool>(
                    this, 
                    "bumpAtlas", 
                    4, 
                    val => GenericMarshal.StringTo<bool>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<string> BaseTex {
            get => new DynamicFieldVector<string>(
                    this, 
                    "baseTex", 
                    4, 
                    val => GenericMarshal.StringTo<string>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<string> DetailTex {
            get => new DynamicFieldVector<string>(
                    this, 
                    "detailTex", 
                    4, 
                    val => GenericMarshal.StringTo<string>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<string> OverlayTex {
            get => new DynamicFieldVector<string>(
                    this, 
                    "overlayTex", 
                    4, 
                    val => GenericMarshal.StringTo<string>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<string> BumpTex {
            get => new DynamicFieldVector<string>(
                    this, 
                    "bumpTex", 
                    4, 
                    val => GenericMarshal.StringTo<string>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public DynamicFieldVector<LinearColorF> ColorMultiply {
            get => new DynamicFieldVector<LinearColorF>(
                    this, 
                    "colorMultiply", 
                    4, 
                    val => GenericMarshal.StringTo<LinearColorF>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public bool CastShadows {
            get => GenericMarshal.StringTo<bool>(GetFieldValue("castShadows"));
            set => SetFieldValue("castShadows", GenericMarshal.ToString(value));
        }

        public bool CastDynamicShadows {
            get => GenericMarshal.StringTo<bool>(GetFieldValue("castDynamicShadows"));
            set => SetFieldValue("castDynamicShadows", GenericMarshal.ToString(value));
        }

        public bool PlanarReflection {
            get => GenericMarshal.StringTo<bool>(GetFieldValue("planarReflection"));
            set => SetFieldValue("planarReflection", GenericMarshal.ToString(value));
        }

        public bool Translucent {
            get => GenericMarshal.StringTo<bool>(GetFieldValue("translucent"));
            set => SetFieldValue("translucent", GenericMarshal.ToString(value));
        }

        public MaterialBlendOp TranslucentBlendOp {
            get => GenericMarshal.StringTo<MaterialBlendOp>(GetFieldValue("translucentBlendOp"));
            set => SetFieldValue("translucentBlendOp", GenericMarshal.ToString(value));
        }

        public bool TranslucentZWrite {
            get => GenericMarshal.StringTo<bool>(GetFieldValue("translucentZWrite"));
            set => SetFieldValue("translucentZWrite", GenericMarshal.ToString(value));
        }

        public bool AlphaTest {
            get => GenericMarshal.StringTo<bool>(GetFieldValue("alphaTest"));
            set => SetFieldValue("alphaTest", GenericMarshal.ToString(value));
        }

        public int AlphaRef {
            get => GenericMarshal.StringTo<int>(GetFieldValue("alphaRef"));
            set => SetFieldValue("alphaRef", GenericMarshal.ToString(value));
        }

        public string Cubemap {
            get => GenericMarshal.StringTo<string>(GetFieldValue("cubemap"));
            set => SetFieldValue("cubemap", GenericMarshal.ToString(value));
        }

        public bool DynamicCubemap {
            get => GenericMarshal.StringTo<bool>(GetFieldValue("dynamicCubemap"));
            set => SetFieldValue("dynamicCubemap", GenericMarshal.ToString(value));
        }

        public bool ShowFootprints {
            get => GenericMarshal.StringTo<bool>(GetFieldValue("showFootprints"));
            set => SetFieldValue("showFootprints", GenericMarshal.ToString(value));
        }

        public bool ShowDust {
            get => GenericMarshal.StringTo<bool>(GetFieldValue("showDust"));
            set => SetFieldValue("showDust", GenericMarshal.ToString(value));
        }

        public DynamicFieldVector<LinearColorF> EffectColor {
            get => new DynamicFieldVector<LinearColorF>(
                    this, 
                    "effectColor", 
                    2, 
                    val => GenericMarshal.StringTo<LinearColorF>(val),
                    obj => GenericMarshal.ToString(obj)
                );
        }

        public int FootstepSoundId {
            get => GenericMarshal.StringTo<int>(GetFieldValue("footstepSoundId"));
            set => SetFieldValue("footstepSoundId", GenericMarshal.ToString(value));
        }

        public SFXTrack CustomFootstepSound {
            get => GenericMarshal.StringTo<SFXTrack>(GetFieldValue("customFootstepSound"));
            set => SetFieldValue("customFootstepSound", GenericMarshal.ToString(value));
        }

        public int ImpactSoundId {
            get => GenericMarshal.StringTo<int>(GetFieldValue("impactSoundId"));
            set => SetFieldValue("impactSoundId", GenericMarshal.ToString(value));
        }

        public SFXTrack CustomImpactSound {
            get => GenericMarshal.StringTo<SFXTrack>(GetFieldValue("customImpactSound"));
            set => SetFieldValue("customImpactSound", GenericMarshal.ToString(value));
        }
    }
}